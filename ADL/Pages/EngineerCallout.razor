@page "/EngineerCallout"
@using ADL.Data
@using Microsoft.Extensions.Logging
@inject ILogger<EngineerCallout> Logger
@inject IJSRuntime JSRuntime
@inject ADL.Data.ApplicationDbContext _context

<h2>Book an Engineer Callout</h2>

<div class="request-form">
<EditForm EditContext="@editContext" OnSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />


    <p>
        <InputText id="FirstName" placeholder="First Name *" @bind-Value="engineerRequest.FirstName" />
        <ValidationMessage For="() => engineerRequest.FirstName" />
    </p>
    <p>
        <InputText id="LastName" placeholder="Last Name *" @bind-Value="engineerRequest.LastName" />
        <ValidationMessage For="() => engineerRequest.LastName" />
    </p>
    <p>
        <InputText id="EmailAddress" placeholder="Email Address *" @bind-Value="engineerRequest.EmailAddress" />
        <ValidationMessage For="() => engineerRequest.EmailAddress" />
    </p>
    <p>
        <InputText id="ContactNumber" placeholder="Contact Number *" @bind-Value="engineerRequest.ContactNumber" />
        <ValidationMessage For="() => engineerRequest.ContactNumber" />
    </p>
    <p>
        <InputText id="Address" placeholder="Address *" @bind-Value="engineerRequest.Address" />
        <ValidationMessage For="() => engineerRequest.Address" />
    </p>
    <p>
        <InputText id="Town" placeholder="Town *" @bind-Value="engineerRequest.Town" />
        <ValidationMessage For="() => engineerRequest.Town" />
    </p>
    <p>
        <InputText id="Postcode" placeholder="Postcode *" @bind-Value="engineerRequest.Postcode" />
        <ValidationMessage For="() => engineerRequest.Postcode" />
    </p>
    <p>
        <InputDate id="AppointmentDate" placeholder="Appointment Date *" @bind-Value="engineerRequest.AppointmentDate" min="" />
        <ValidationMessage For="() => engineerRequest.AppointmentDate" />
    </p>
    <p>
        <InputRadioGroup id="AppointmentTime" placeholder="Appointment Time *" @bind-Value="engineerRequest.AppointmentTime">
            @if(TimeSlotsDay.First() == "Weekend"){
                <p>There are no time slots available on the weekend</p>
            }else if(TimeSlotsDay.First() == "None")
            {
                <p>Please select a date to see available timeslots</p>
            }
            else
            {
               foreach (var timeSlot in TimeSlotsDay)
                {
                    <InputRadio Value="timeSlot" /> @timeSlot <br />
                } 
            }


                
            
            

        </InputRadioGroup>
        <ValidationMessage For="() => engineerRequest.AppointmentTime" />
    </p>
    <p>
        <InputText id="VehicleRegistation" placeholder="Vehicle Registration *" @bind-Value="engineerRequest.VehicleRegistation" />
        <ValidationMessage For="() => engineerRequest.VehicleRegistation" />
    </p>
    <p>
        <InputSelect id="JobCategory" @bind-Value="engineerRequest.JobCategory">
            <option value="">Select Job Category *</option>
            <option value="warranty">Warranty</option>
            <option value="breakdown">Breakdown</option>
            <option value="vehicleoffroad">Vehicle off Road</option>
        </InputSelect>
        <ValidationMessage For="() => engineerRequest.JobCategory" />
    </p>
    <p>
        <InputTextArea id="Comments" placeholder="Comments" @bind-Value="engineerRequest.Comments" />
    </p>
    <p>
        <button type="submit">Submit</button>
    </p>

    <p>* Required</p>
</EditForm>
</div>

@code {
    private EngineerRequest engineerRequest = new EngineerRequest();
    private EditContext? editContext;


    private void getAvailableTimes() {
        var test = _context.Requests.Where(x => x.AppointmentDate == engineerRequest.AppointmentDate).Select(x => x.AppointmentTime).ToList();
        Console.WriteLine(test);
        Console.WriteLine("test");
    }

    protected override void OnInitialized()
    {
        editContext = new EditContext(engineerRequest);
        editContext.OnFieldChanged += editContext_OnFieldChanged;
        
        base.OnInitialized();
    }

    private void editContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        if (e.FieldIdentifier.FieldName == "AppointmentDate")
        {
            getAvailableTimes();

            DayOfWeek? dayOfWeek = engineerRequest.AppointmentDate.Value.DayOfWeek;

            switch (dayOfWeek)
            {
                case DayOfWeek.Monday:
                    TimeSlotsDay = TimeSlotsMonday;
                    break;
                case DayOfWeek.Tuesday:
                    TimeSlotsDay = TimeSlotsTuesday;
                    break;
                case DayOfWeek.Wednesday:
                    TimeSlotsDay = TimeSlotsWednesday;
                    break;
                case DayOfWeek.Thursday:
                    TimeSlotsDay = TimeSlotsThursday;
                    break;
                case DayOfWeek.Friday:
                    TimeSlotsDay = TimeSlotsFriday;
                    break;
                case DayOfWeek.Saturday:
                    TimeSlotsDay = TimeSlotsSaturday;
                    break;
                case DayOfWeek.Sunday:
                    TimeSlotsDay = TimeSlotsSunday; 
                    break;
            }
        }
    }


    //private async Task HandleSubmit()
    //{
    //    if (editContext != null && editContext.Validate())
    //    {
    //        Logger.LogInformation("HandleSubmit form is valid");

    //        //process form
    //        //await

    //        await Task.CompletedTask;
    //    }
    //    else
    //    {
    //        Logger.LogInformation("HandleSubmit form is invalid");
    //    }
    //}

    private async void HandleValidSubmit()
    {
        Logger.LogInformation("HandleValidSubmit called");

        try
        {
            Logger.LogInformation("Adding to context");
            _context.Requests.Add(engineerRequest);
            await _context.SaveChangesAsync();
        }
        catch
        {
            base.StateHasChanged();
        }

        //re-render form
        engineerRequest = new EngineerRequest();
        base.StateHasChanged();

       
    }

    private enum JobCategory { warranty, breakdown, vehicleoffroad }

    List<string> TimeSlotsMonday = new List<string> { "08:00 - 10:00", "11:00 - 13:00", "14:00 - 16:00" };
    List<string> TimeSlotsTuesday = new List<string> { "09:00 - 11:00", "12:00 - 14:00", "15:00 - 17:00" };
    List<string> TimeSlotsWednesday = new List<string> { "08:00 - 10:00", "11:00 - 13:00", "14:00 - 16:00" };
    List<string> TimeSlotsThursday = new List<string> { "09:00 - 11:00", "12:00 - 14:00", "15:00 - 17:00" };
    List<string> TimeSlotsFriday = new List<string> { "08:00 - 10:00", "11:00 - 13:00" };
    List<string> TimeSlotsSaturday = new List<string> { "Weekend" };
    List<string> TimeSlotsSunday = new List<string> { "Weekend" };
    List<string> TimeSlotsDay = new List<string> { "None" };

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("GetDateTime");
        }
    }



}
