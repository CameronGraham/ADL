@page "/EngineerCallout"
@using ADL.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Logging
@inject ILogger<EngineerCallout> Logger
@inject IJSRuntime JSRuntime
@inject ADL.Data.ApplicationDbContext _context



<div class="container">
    <div class="row justify-content-md-center">
        <div class="col-xxl-6">
            <h2 class="mb-3">Book an Engineer Callout</h2>

            <div class="request-form">
                <EditForm class="form" EditContext="@editContext" OnSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />


                    <div class="row">
                        <p class="formSectionHeader mt-3">Your details</p>
                        <div class="col-md-6">
                            <div class="form-floating mb-3">
                                <InputText id="FirstName" class="form-control" placeholder="First Name *" @bind-Value="engineerRequest.FirstName" />
                                <label class="floatingLabel" for="FirstName">First Name *</label>
                                <ValidationMessage For="() => engineerRequest.FirstName" />
                            </div>

                            <div class="form-floating mb-3">
                                <InputText id="LastName" class="form-control" placeholder="Last Name *" @bind-Value="engineerRequest.LastName" />
                                <label class="floatingLabel" for="LastName">Last Name *</label>
                                <ValidationMessage For="() => engineerRequest.LastName" />
                            </div>
                            <div class="form-floating mb-3">
                                <InputText id="EmailAddress" class="form-control" placeholder="Email Address *" @bind-Value="engineerRequest.EmailAddress" />
                                <label class="floatingLabel" for="EmailAddress">Email Address *</label>
                                <ValidationMessage For="() => engineerRequest.EmailAddress" />
                            </div>
                            <div class="form-floating mb-3">
                                <InputText id="ContactNumber" class="form-control" placeholder="Contact Number *" @bind-Value="engineerRequest.ContactNumber" />
                                <label class="floatingLabel" for="ContactNumber">Contact Number *</label>
                                <ValidationMessage For="() => engineerRequest.ContactNumber" />
                            </div>
                        </div>
                       

                        <div class="col-md-6">
                            <div class="form-floating mb-3">
                                <InputText id="Address" class="form-control" placeholder="Address *" @bind-Value="engineerRequest.Address" />
                                <label class="floatingLabel" for="Address">Address *</label>
                                <ValidationMessage For="() => engineerRequest.Address" />
                            </div>
                            <div class="form-floating mb-3">
                                <InputText id="Town" class="form-control" placeholder="Town *" @bind-Value="engineerRequest.Town" />
                                <label class="floatingLabel" for="Town">Town *</label>
                                <ValidationMessage For="() => engineerRequest.Town" />
                            </div>
                            <div class="form-floating mb-3">
                                <InputText id="Postcode" class="form-control" placeholder="Postcode *" @bind-Value="engineerRequest.Postcode" />
                                <label class="floatingLabel" for="Postcode">Postcode *</label>
                                <ValidationMessage For="() => engineerRequest.Postcode" />
                            </div>
                           </div>
                    
                           <p class="formSectionHeader mt-3">Vehicle details</p>
                            <div class="col-md-6">
                                <div class="form-floating mb-3">
                                    <InputText id="VehicleRegistation" class="form-control" placeholder="Vehicle Registration *" @bind-Value="engineerRequest.VehicleRegistation" />
                                    <label class="floatingLabel" for="VehicleRegistation">Vehicle Registation *</label>
                                    <ValidationMessage For="() => engineerRequest.VehicleRegistation" />
                                </div>

                            </div>
                            <div class="col-md-6">
                                <div class="form-floating mb-3">
                                    <InputSelect id="JobCategory" class="form-select" @bind-Value="engineerRequest.JobCategory">
                                        <option value="">Select Job Category *</option>
                                        <option value="warranty">Warranty</option>
                                        <option value="breakdown">Breakdown</option>
                                        <option value="vehicleoffroad">Vehicle off Road</option>
                                    </InputSelect>
                                    <label class="floatingLabel" for="JobCategory">Select Job Category *</label>
                                    <ValidationMessage For="() => engineerRequest.JobCategory" />
                                </div>

                            </div>
                        
                        
                            <div class="col-12">
                                <div class="form-floating mb-3">
                                    <InputTextArea id="Comments" class="form-control" placeholder="Comments" @bind-Value="engineerRequest.Comments" style="height: 10em" />
                                    <label class="floatingLabel" for="Comments">Additional comments</label>
                                </div>


                                <div class="form-floating mb-3">
                                    <InputDate id="AppointmentDate" class="form-control" placeholder="Appointment Date *" @bind-Value="engineerRequest.AppointmentDate" min="@minDate.ToString("yyyy-MM-dd")" />
                                    <label class="floatingLabel" for="AppointmentDate">Appointment Date *</label>
                                    <ValidationMessage For="() => engineerRequest.AppointmentDate" />
                                </div>
                                <div class="row mb-3">
                                    <InputRadioGroup id="AppointmentTime" placeholder="Appointment Time *" @bind-Value="engineerRequest.AppointmentTime">

                                        @if (TimeSlotsDay.First() == "Weekend")
                                        {
                                            <div class="col">
                                                <div class="alert alert-danger" role="alert">There are no time slots available on the weekend</div>
                                            </div>
                                        }
                                        else if (TimeSlotsDay.First() == "None")
                                        {
                                            <div class="col">
                                                <div class="alert alert-secondary" role="alert">Please select a date to see available timeslots</div>
                                            </div>
                                        }

                                        else
                                        {
                                            foreach (var timeSlot in TimeSlotsDay)
                                            {
                                                <div class="col-md mb-3">
                                                    @if (Requests.Where(x => x.AppointmentTime == timeSlot).Any())
                                                    {
                                                        <div class="wrapper">
                                                            <InputRadio disabled class="form-control" Value="timeSlot" id="@timeSlot" />
                                                            <label class="timeslotLabel" for="@timeSlot">@timeSlot</label>
                                                            <div id="infoi">Unavailable</div>
                                                        </div>


                                                    }
                                                    else
                                                    {

                                                        <InputRadio class="form-control" Value="timeSlot" id="@timeSlot" />
                                                        <label class="timeslotLabel" for="@timeSlot">@timeSlot</label>


                                                    }
                                                </div>

                                            }
                                        }
                                    </InputRadioGroup>
                                    <ValidationMessage For="() => engineerRequest.AppointmentTime" />
                                </div>
                            </div>
                         </div>

                          <div class="alert alert-success @submitStatus" role="alert">
                            Your booking has been made
                        </div>

                    <div class="col-sm-12 col-md-3 mb-3">
                        <button type="submit" class="btn btn-adl">Book now</button>
                    </div>

                    <div class="float-end">* Required</div>
                </EditForm>

               

            </div>
        </div>
    </div>
</div>


@code {
    private EngineerRequest engineerRequest = new EngineerRequest();
    private EditContext? editContext;
    public List<EngineerRequest> Requests = new List<EngineerRequest>();

    string submitStatus = "invalidSubmit";

    

    DateTime minDate = DateTime.Now.AddDays(2);



    private void GetTimeslots()
    {
        Requests = _context.Requests.Where(x => x.AppointmentDate == engineerRequest.AppointmentDate).OrderByDescending(_ => _.Id).ToList();

    }

    protected override void OnInitialized()
    {
        editContext = new EditContext(engineerRequest);
        editContext.OnFieldChanged += editContext_OnFieldChanged;

        base.OnInitialized();
    }

    private void editContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        if (e.FieldIdentifier.FieldName == "AppointmentDate")
        {
            GetTimeslots();

            string dayOfWeek = "None";

            if (engineerRequest.AppointmentDate == null)
            {
                engineerRequest.AppointmentDate = minDate;
            }
            dayOfWeek = engineerRequest.AppointmentDate.Value.DayOfWeek.ToString();

            switch (dayOfWeek)
            {
                case "Monday":

                    TimeSlotsDay = TimeSlotsMonday;
                    break;
                case "Tuesday":
                    TimeSlotsDay = TimeSlotsTuesday;
                    break;
                case "Wednesday":
                    TimeSlotsDay = TimeSlotsWednesday;
                    break;
                case "Thursday":
                    TimeSlotsDay = TimeSlotsThursday;
                    break;
                case "Friday":
                    TimeSlotsDay = TimeSlotsFriday;
                    break;
                case "Saturday":
                    TimeSlotsDay = TimeSlotsSaturday;
                    break;
                case "Sunday":
                    TimeSlotsDay = TimeSlotsSunday;
                    break;
                default:
                    TimeSlotsDay = TimeSlotsDay;
                    break;

            }
        }
    }



    private async Task HandleValidSubmit()
    {
        Logger.LogInformation("HandleValidSubmit called");

        try
        {
            if (editContext != null && editContext.Validate())
            {
                Logger.LogInformation("HandleSubmit form is valid");
                Logger.LogInformation("Adding to context");
                _context.Requests.Add(engineerRequest);
                await _context.SaveChangesAsync();

                submitStatus = "validSubmit";            
            

                //re-render form
                engineerRequest = new EngineerRequest();
            }    

        }
        catch
        {
            base.StateHasChanged();
        }

        
        
        //base.StateHasChanged();


    }

    private enum JobCategory { warranty, breakdown, vehicleoffroad }

    List<string> TimeSlotsMonday = new List<string> { "08:00 - 10:00", "11:00 - 13:00", "14:00 - 16:00" };
    List<string> TimeSlotsTuesday = new List<string> { "09:00 - 11:00", "12:00 - 14:00", "15:00 - 17:00" };
    List<string> TimeSlotsWednesday = new List<string> { "08:00 - 10:00", "11:00 - 13:00", "14:00 - 16:00" };
    List<string> TimeSlotsThursday = new List<string> { "09:00 - 11:00", "12:00 - 14:00", "15:00 - 17:00" };
    List<string> TimeSlotsFriday = new List<string> { "08:00 - 10:00", "11:00 - 13:00" };
    List<string> TimeSlotsSaturday = new List<string> { "Weekend" };
    List<string> TimeSlotsSunday = new List<string> { "Weekend" };
    List<string> TimeSlotsDay = new List<string> { "None" };

}
