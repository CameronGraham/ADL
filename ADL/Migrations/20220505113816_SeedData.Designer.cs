// <auto-generated />
using System;
using ADL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ADL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220505113816_SeedData")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ADL.Data.EngineerRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AppointmentDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("AppointmentTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleRegistation")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.HasKey("Id");

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Test Way",
                            AppointmentDate = new DateTime(2022, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentTime = "11:00 - 13:00",
                            Comments = "The bus is broken",
                            ContactNumber = "12345678910",
                            EmailAddress = "joe.bloggs@email.com",
                            FirstName = "Joe",
                            JobCategory = "breakdown",
                            LastName = "Bloggs",
                            Postcode = "postcode",
                            Town = "TownName",
                            VehicleRegistation = "1234567"
                        },
                        new
                        {
                            Id = 2,
                            Address = "124 Test Way",
                            AppointmentDate = new DateTime(2022, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentTime = "09:00 - 11:00",
                            Comments = "Engine making noise",
                            ContactNumber = "12345678910",
                            EmailAddress = "janedoe@email.com",
                            FirstName = "Jane",
                            JobCategory = "warranty",
                            LastName = "Doe",
                            Postcode = "postcode",
                            Town = "TownName",
                            VehicleRegistation = "1234567"
                        },
                        new
                        {
                            Id = 3,
                            Address = "125 Test Way",
                            AppointmentDate = new DateTime(2022, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentTime = "09:00 - 11:00",
                            Comments = "The bus is broken",
                            ContactNumber = "12345678910",
                            EmailAddress = "joe.bloggs@email.com",
                            FirstName = "Joe",
                            JobCategory = "breakdown",
                            LastName = "Bloggs",
                            Postcode = "postcode",
                            Town = "TownName",
                            VehicleRegistation = "1234567"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
